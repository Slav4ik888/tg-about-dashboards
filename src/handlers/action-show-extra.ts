import { quizData } from '../data/data.js';
import { Context, Markup } from 'telegraf';
import { userStateService } from '../store/index.js';


export const actionShowExtra = async (ctx: Context) => {
  console.log('show_extra: ', ctx.message);

  if (! ctx.chat) { console.error('Chat object is undefined. [bot.action show_extra]'); return; }

  const userId = ctx.chat.id;
  const userState = userStateService.getUserState(userId);

  if (!userState) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.');
    return;
  }

  const currentQuestionIndex = userState.currentQuestionIdx;
  const question             = quizData.questions[currentQuestionIndex];
  const lastAnswer           = userState.userAnswers[userState.userAnswers.length - 1];
  const response             = question.responses[lastAnswer.type];

  userState.showExtra = true;

  await ctx.editMessageReplyMarkup({ inline_keyboard: [] }); // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
  await ctx.reply(response.extra);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–Ω–æ–≤–∞
  const isLastQuestion = currentQuestionIndex === quizData.questions.length - 1;
  const buttons = [];

  if (isLastQuestion) {
    buttons.push([Markup.button.callback('üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å', 'finish')]);
  }
  else {
    buttons.push([Markup.button.callback('‚û°Ô∏è –î–∞–ª–µ–µ', 'next')]);
  }

  await ctx.reply('–ü—Ä–æ–¥–æ–ª–∂–∏–º?', Markup.inlineKeyboard(buttons));
}
